import pandas as pd
from datetime import datetime, date
from io import StringIO
import streamlit as st

def generate_delivery_challan(dispatch_record):
    """Generate a delivery challan text document"""
    challan_content = f"""
    =====================================
           DELIVERY CHALLAN
    =====================================
    
    Challan No: {dispatch_record[9] or 'N/A'}
    Date: {dispatch_record[5] or date.today()}
    
    -------------------------------------
    PROJECT DETAILS
    -------------------------------------
    Project Name: {dispatch_record[1] or 'N/A'}
    Order Number: {dispatch_record[2] or 'N/A'}
    
    -------------------------------------
    DISPATCH DETAILS
    -------------------------------------
    Vehicle Number: {dispatch_record[3] or 'N/A'}
    Driver Name: {dispatch_record[4] or 'N/A'}
    Dispatch Date: {dispatch_record[5] or 'N/A'}
    Expected Delivery: {dispatch_record[6] or 'N/A'}
    Status: {dispatch_record[7] or 'N/A'}
    
    -------------------------------------
    RESPONSIBLE PERSON
    -------------------------------------
    Name: {dispatch_record[8] or 'N/A'}
    
    -------------------------------------
    NOTES
    -------------------------------------
    {dispatch_record[10] or 'No additional notes'}
    
    -------------------------------------
    SIGNATURES
    -------------------------------------
    
    Dispatcher: ___________________
    Date: _______
    
    Receiver: _____________________
    Date: _______
    
    =====================================
    Generated by PPMS on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    =====================================
    """
    
    return challan_content

def export_projects_to_csv(projects_data):
    """Export projects data to CSV format"""
    if not projects_data:
        return "No data to export"
    
    df = pd.DataFrame(projects_data, columns=[
        'ID', 'Name', 'Client', 'Location', 'Start Date', 'End Date', 'Status', 'Created By', 'Created At'
    ])
    
    return df.to_csv(index=False)

def export_work_orders_to_csv(work_orders_data):
    """Export work orders data to CSV format"""
    if not work_orders_data:
        return "No data to export"
    
    df = pd.DataFrame(work_orders_data, columns=[
        'ID', 'WO Number', 'Project', 'Floor', 'Description', 'Type', 'Status', 'Priority', 
        'Due Date', 'Assigned To', 'Created By', 'Created At'
    ])
    
    return df.to_csv(index=False)

def export_production_log_to_csv(production_data):
    """Export production log data to CSV format"""
    if not production_data:
        return "No data to export"
    
    df = pd.DataFrame(production_data, columns=[
        'ID', 'WO Number', 'Project', 'Operator', 'Machine', 'Quantity', 
        'Production Date', 'Shift', 'Notes', 'Created By', 'Created At'
    ])
    
    return df.to_csv(index=False)

def export_daily_targets_to_csv(targets_data):
    """Export daily targets data to CSV format"""
    if not targets_data:
        return "No data to export"
    
    df = pd.DataFrame(targets_data, columns=[
        'ID', 'Order Number', 'Project', 'Description', 'Target Qty', 'Target Date', 
        'Assigned To', 'Status', 'Actual Qty', 'Completion Date', 'Notes', 'Created By', 'Created At'
    ])
    
    return df.to_csv(index=False)

def export_cutting_lists_to_csv(cutting_data):
    """Export cutting lists data to CSV format"""
    if not cutting_data:
        return "No data to export"
    
    df = pd.DataFrame(cutting_data, columns=[
        'ID', 'Order Number', 'Project', 'Floor', 'Description', 'Width', 'Height', 
        'Quantity', 'Color', 'Status', 'Cut Date', 'Created By', 'Created At'
    ])
    
    return df.to_csv(index=False)

def export_balance_orders_to_csv(balance_data):
    """Export balance orders data to CSV format"""
    if not balance_data:
        return "No data to export"
    
    df = pd.DataFrame(balance_data, columns=[
        'ID', 'WO Number', 'Project', 'Floor', 'Priority', 'Specifications', 
        'Required Qty', 'Fulfilled Qty', 'Total Qty', 'Due Date', 'Status', 
        'Created By', 'Created At'
    ])
    
    return df.to_csv(index=False)

def export_dispatch_to_csv(dispatch_data):
    """Export dispatch data to CSV format"""
    if not dispatch_data:
        return "No data to export"
    
    df = pd.DataFrame(dispatch_data, columns=[
        'ID', 'Project', 'Order Number', 'Vehicle Number', 'Driver Name', 
        'Dispatch Date', 'Delivery Date', 'Status', 'Responsible Person', 
        'Challan Number', 'Notes', 'Created By', 'Created At'
    ])
    
    return df.to_csv(index=False)

def generate_project_summary_report(project_id, from_date=None, to_date=None):
    """Generate a comprehensive project summary report"""
    try:
        from database import get_db
        from sqlalchemy import text
        
        db = get_db()
        
        # Project basic info
        project_info = db.execute(text("""
            SELECT name, client, location, start_date, end_date, status, description
            FROM projects WHERE id = :project_id
        """), {"project_id": project_id}).fetchone()
        
        if not project_info:
            return "Project not found"
        
        # Date filter conditions
        date_filter = ""
        params = {"project_id": project_id}
        
        if from_date:
            date_filter += " AND created_at >= :from_date"
            params["from_date"] = from_date
        
        if to_date:
            date_filter += " AND created_at <= :to_date"
            params["to_date"] = to_date
        
        # Work Orders summary
        wo_summary = db.execute(text(f"""
            SELECT 
                COUNT(*) as total_wo,
                COUNT(CASE WHEN status = 'Completed' THEN 1 END) as completed_wo,
                COUNT(CASE WHEN status = 'Pending' THEN 1 END) as pending_wo
            FROM work_orders 
            WHERE project_id = :project_id {date_filter}
        """), params).fetchone()
        
        # Production summary
        production_summary = db.execute(text(f"""
            SELECT 
                COUNT(*) as total_entries,
                SUM(produced_quantity) as total_produced
            FROM production_log 
            WHERE project_id = :project_id {date_filter}
        """), params).fetchone()
        
        # Cutting summary
        cutting_summary = db.execute(text(f"""
            SELECT 
                COUNT(*) as total_items,
                SUM(quantity) as total_quantity,
                COUNT(CASE WHEN status = 'Cut' THEN 1 END) as cut_items
            FROM cutting_lists 
            WHERE project_id = :project_id {date_filter}
        """), params).fetchone()
        
        # Balance orders summary
        balance_summary = db.execute(text(f"""
            SELECT 
                COUNT(*) as total_orders,
                SUM(required_qty) as total_required,
                SUM(fulfilled_qty) as total_fulfilled
            FROM balance_orders 
            WHERE project_id = :project_id {date_filter}
        """), params).fetchone()
        
        # Dispatch summary
        dispatch_summary = db.execute(text(f"""
            SELECT 
                COUNT(*) as total_dispatches,
                COUNT(CASE WHEN status = 'Delivered' THEN 1 END) as delivered_count
            FROM dispatch 
            WHERE project_id = :project_id {date_filter}
        """), params).fetchone()
        
        db.close()
        
        # Generate report
        report_content = f"""
        =====================================
           PROJECT SUMMARY REPORT
        =====================================
        
        Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        Report Period: {from_date or 'All time'} to {to_date or 'Present'}
        
        -------------------------------------
        PROJECT INFORMATION
        -------------------------------------
        Project Name: {project_info[0]}
        Client: {project_info[1] or 'N/A'}
        Location: {project_info[2] or 'N/A'}
        Start Date: {project_info[3] or 'N/A'}
        End Date: {project_info[4] or 'N/A'}
        Status: {project_info[5]}
        Description: {project_info[6] or 'N/A'}
        
        -------------------------------------
        WORK ORDERS SUMMARY
        -------------------------------------
        Total Work Orders: {wo_summary[0]}
        Completed: {wo_summary[1]}
        Pending: {wo_summary[2]}
        Completion Rate: {(wo_summary[1] / wo_summary[0] * 100) if wo_summary[0] > 0 else 0:.1f}%
        
        -------------------------------------
        PRODUCTION SUMMARY
        -------------------------------------
        Total Production Entries: {production_summary[0]}
        Total Quantity Produced: {production_summary[1] or 0}
        
        -------------------------------------
        CUTTING SUMMARY
        -------------------------------------
        Total Cutting Items: {cutting_summary[0]}
        Total Quantity: {cutting_summary[1] or 0}
        Items Cut: {cutting_summary[2]}
        Cutting Progress: {(cutting_summary[2] / cutting_summary[0] * 100) if cutting_summary[0] > 0 else 0:.1f}%
        
        -------------------------------------
        BALANCE ORDERS SUMMARY
        -------------------------------------
        Total Balance Orders: {balance_summary[0]}
        Total Required Quantity: {balance_summary[1] or 0}
        Total Fulfilled Quantity: {balance_summary[2] or 0}
        Fulfillment Rate: {(balance_summary[2] / balance_summary[1] * 100) if balance_summary[1] and balance_summary[1] > 0 else 0:.1f}%
        
        -------------------------------------
        DISPATCH SUMMARY
        -------------------------------------
        Total Dispatches: {dispatch_summary[0]}
        Delivered: {dispatch_summary[1]}
        Delivery Rate: {(dispatch_summary[1] / dispatch_summary[0] * 100) if dispatch_summary[0] > 0 else 0:.1f}%
        
        =====================================
        End of Report
        =====================================
        """
        
        return report_content
        
    except Exception as e:
        return f"Error generating report: {str(e)}"

def generate_monthly_production_report(year, month):
    """Generate monthly production report"""
    try:
        from database import get_db
        from sqlalchemy import text
        
        db = get_db()
        
        # Monthly production data
        monthly_data = db.execute(text("""
            SELECT 
                pl.production_date,
                p.name as project_name,
                u.username as operator_name,
                pl.machine_used,
                pl.produced_quantity,
                pl.shift
            FROM production_log pl
            LEFT JOIN projects p ON pl.project_id = p.id
            LEFT JOIN users u ON pl.operator_id = u.id
            WHERE EXTRACT(YEAR FROM pl.production_date) = :year 
                AND EXTRACT(MONTH FROM pl.production_date) = :month
            ORDER BY pl.production_date, pl.shift
        """), {"year": year, "month": month}).fetchall()
        
        # Summary statistics
        total_quantity = sum([record[4] for record in monthly_data if record[4]])
        working_days = len(set([record[0] for record in monthly_data]))
        operators = len(set([record[2] for record in monthly_data if record[2]]))
        
        db.close()
        
        # Generate report
        report_content = f"""
        =====================================
        MONTHLY PRODUCTION REPORT
        =====================================
        
        Report Period: {month:02d}/{year}
        Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        
        -------------------------------------
        SUMMARY STATISTICS
        -------------------------------------
        Total Production: {total_quantity}
        Working Days: {working_days}
        Active Operators: {operators}
        Daily Average: {total_quantity / working_days if working_days > 0 else 0:.1f}
        
        -------------------------------------
        DAILY BREAKDOWN
        -------------------------------------
        """
        
        # Group by date for daily breakdown
        daily_totals = {}
        for record in monthly_data:
            date_key = record[0]
            if date_key not in daily_totals:
                daily_totals[date_key] = 0
            daily_totals[date_key] += record[4] or 0
        
        for date_key, total in sorted(daily_totals.items()):
            report_content += f"{date_key}: {total}\n"
        
        report_content += """
        
        =====================================
        End of Report
        =====================================
        """
        
        return report_content
        
    except Exception as e:
        return f"Error generating monthly report: {str(e)}"
